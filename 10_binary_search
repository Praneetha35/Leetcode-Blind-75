def binary_search(array, first, last, target):
    if first > last:
        return -1  # Target not found
    
    mid = (first + last) // 2
    if array[mid] == target:
        return mid
    elif target < array[mid]:
        return binary_search(array, first, mid - 1, target)
    else:
        return binary_search(array, mid + 1, last, target)

array = [1, 2, 4, 5, 7]
target = 5
first = 0
last = len(array) - 1
index = binary_search(array, first, last, target)
print("The target is at index:", index)

Time Complexity: O(logn)
Space Complexity: O(logn) due to recursion stack
In a recursive binary search, each recursive call adds a new layer to the call stack. The depth of the recursion tree corresponds to the number of times 
we can halve the array, which is log 𝑛.
Therefore, the space complexity for the recursive version is 𝑂(log𝑛), as each recursive call consumes additional stack space.
